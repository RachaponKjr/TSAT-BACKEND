import { Request, Response } from 'express';
import {
  createServiceService,
  createSubService,
  deleteService,
  delSucService,
  get_serive_id,
  get_Service,
  getSubservice,
  getSubServices,
  updateService
} from '../service/Service';
import path from 'path';
import fs from 'fs/promises';

const createService = async (req: Request, res: Response): Promise<void> => {
  try {
    const { serviceName, serviceDetail, title, explain, bgIcon, icon } =
      req.body;
    const files = req.files as Express.Multer.File[];

    if (!serviceName || !files || files.length === 0) {
      res.status(400).json({
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ'
      });
      return;
    }

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡∏´‡∏£‡∏∑‡∏≠ path) ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö
    const imageFilenames = files.map((file) => file.filename);

    const service = await createServiceService({
      serviceName,
      serviceDetail,
      title,
      explain,
      icon,
      bgIcon,
      image: imageFilenames
    });

    res.status(201).json({ message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', data: service });
  } catch (error) {
    res.status(500).json({ message: 'Server Error!', error });
  }
};

const getService = async (req: Request, res: Response): Promise<void> => {
  try {
    const service = await get_Service();
    res.status(200).json({ status: 200, service });
  } catch (error) {
    res.status(500).json({ message: 'Server Error!', error });
  }
};

const updateServiceController = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const files = req.files as Express.Multer.File[];
    if (!id) {
      res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const checkId = await get_Service(); // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ get_ServiceById(id) ‡πÅ‡∏ó‡∏ô
    const existingService = checkId.find((item) => item.id === id);

    if (!existingService) {
      res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
      return;
    }
    const imageFilenames = files.map((file) => `/uploads/${file.filename}`);

    const payload = {
      ...req.body,
      image: files ? imageFilenames : undefined
    };

    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const updated = await updateService(id, payload);

    res.status(200).json({ message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', data: updated });
  } catch (error) {
    console.error('Update service error:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö', error });
  }
};

const deleteServiceController = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;

    if (!id) {
      res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const checkId = await get_Service();
    const existingService = checkId.find((item) => item.id === id);

    if (!existingService) {
      res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
      return;
    }

    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    const imagePaths: string[] = existingService.images ?? [];

    for (const imagePath of imagePaths) {
      const fullPath = path.join(__dirname, '../..', imagePath); // ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
      try {
        await fs.unlink(fullPath);
        console.log(`Deleted image: ${fullPath}`);
      } catch (err) {
        console.warn(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${fullPath}`, err);
      }
    }

    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await deleteService(id);

    res.status(200).json({ message: '‡∏•‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (error) {
    console.error('Delete service error:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö', error });
  }
};

const createSubServiceControlle = async (req: Request, res: Response) => {
  try {
    const { serviceId, subServiceName, subServiceDetail } = req.body;
    const dataReq = {
      serviceId,
      subServiceDetail,
      subServiceName
    };

    if (!serviceId || !subServiceName) {
      res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏ö serviceId ‡∏´‡∏£‡∏∑‡∏≠ serviceName' });
      return;
    }

    const checkSerivce = await get_serive_id(serviceId);

    if (!checkSerivce) {
      res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö service' });
      return;
    }

    const createDb = await createSubService(dataReq);
    if (createDb) {
      res.status(201).json({ data: createDb, message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
      return;
    }
  } catch {
    console.log('Err Server');
    return;
  }
};

const getSubServiceById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    if (!id) {
      res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏ô‡∏µ‡πâ' });
      return;
    }
    const subService = await getSubservice(id);
    res.status(200).json({ message: 'ok', subService });
    return;
  } catch {
    console.log('server error');
  }
};

const getSubServicesController = async (req: Request, res: Response) => {
  try {
    const subService = await getSubServices();
    console.log('üîç subService:', subService);

    res.status(200).json({
      message: '‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: subService
    });
    return;
  } catch (error) {
    console.error('‚ùå Server Error:', error);
    res.status(500).json({
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå'
    });
    return;
  }
};

const delSubServiceController = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    if (!id) {
      res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ ‡∏™‡πà‡∏á id' });
      return;
    }
    await delSucService(id)
      .then(() => {
        res.status(200).json({ message: 'del Ok!' });
        return;
      })
      .catch(() => {
        res.status(404).json({ message: 'Not Fount Id Subservice' });
        return;
      });
  } catch (e) {
    console.log(e, 'Server Error');
    return;
  }
};

export {
  createService,
  getService,
  updateServiceController,
  deleteServiceController,
  createSubServiceControlle,
  delSubServiceController,
  getSubServiceById,
  getSubServicesController
};
