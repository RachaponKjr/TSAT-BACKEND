generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CMS HomePage
model CMSHomePage {
  id           String  @id @default(uuid()) @db.Uuid
  text_line_1  String?
  text_line_2  String?
  text_line_3  String?
  text_line_4  String?
  text_line_5  String?
  text_line_6  String?
  text_line_7  String?
  text_line_8  String?
  text_line_9  String?
  text_line_10 String?
  text_line_11 String?
  text_line_12 String?
  text_line_13 String?
}

model CMSServicePage {
  id          String  @id @default(uuid()) @db.Uuid
  text_line_1 String?
  text_line_2 String?
  text_line_3 String?
  text_line_4 String?
  text_line_5 String?
  text_line_6 String?
  text_line_7 String?
}

model CMSProductPage {
  id          String  @id @default(uuid()) @db.Uuid
  text_line_1 String?
  text_line_2 String?
  text_line_3 String?
}

model CMSCustomerPage {
  id          String  @id @default(uuid()) @db.Uuid
  text_line_1 String?
  text_line_2 String?
  text_line_3 String?
}

model CMSAboutPage {
  id          String  @id @default(uuid()) @db.Uuid
  text_line_1 String?
  text_line_2 String?
  text_line_3 String?
}

model CMSContactPage {
  id          String  @id @default(uuid()) @db.Uuid
  text_line_1 String?
  text_line_2 String?
  text_line_3 String?
}

model ContactInformation {
  id             String  @id
  facebook       String?
  instagram      String?
  line           String?
  phone          String?
  phone2         String?
  mail           String?
  link_facebook  String?
  link_line      String?
  link_instagram String?
  link_email     String?
}

// CMS 

model CarModel {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique
  image      String
  showActive Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @default(now()) @db.Timestamptz

  carSubModels    CarSubModel[]
  CustomerWork    CustomerWork[]
  CustomerReview  CustomerReview[]
  WorkService     WorkService[]
  carServiceLinks CarServiceLink[] // ‚úÖ ‡∏û‡∏´‡∏π‡∏û‡∏à‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
}

model CarSubModel {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  image      String?
  carModelId String   @db.Uuid
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @default(now()) @db.Timestamptz

  carModel       CarModel         @relation(fields: [carModelId], references: [id], onDelete: Cascade)
  carServices    CarService[]
  CustomerReview CustomerReview[]
  WorkService    WorkService[]
  CustomerWork   CustomerWork[]
}

model CategoryServiceCarModel {
  id        String   @id @default(uuid()) @db.Uuid
  category  String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  carServiceLinks CarServiceLink[] // ‚úÖ Relation ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á link ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô
}

model CarServiceLink {
  id                        String  @id @default(uuid()) @db.Uuid
  carModelId                String  @db.Uuid
  carServiceId              String  @db.Uuid
  categoryServiceCarModelId String? @db.Uuid

  carModel   CarModel                @relation(fields: [carModelId], references: [id])
  carService CategoryServiceCarModel @relation(fields: [carServiceId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz

  @@unique([carModelId, carServiceId]) // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ carModel+carService ‡∏ã‡πâ‡∏≥
}

model CustomerReview {
  id            String       @id @default(uuid()) @db.Uuid
  customerName  String
  review        String
  image         String
  carModelId    String       @db.Uuid
  carModel      CarModel     @relation(fields: [carModelId], references: [id]) // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° relation
  carSubModelId String?      @db.Uuid // üëà optional
  carSubModel   CarSubModel? @relation(fields: [carSubModelId], references: [id])
  createdAt     DateTime     @default(now()) @db.Timestamptz
  updatedAt     DateTime     @updatedAt @db.Timestamptz
}

model CustomerWork {
  id            String            @id @default(uuid()) @db.Uuid
  title         String
  content       Json // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Rich Text
  images        String // URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  serviceId     String?           @db.Uuid
  subServiceId  String?           @db.Uuid
  carModelId    String?           @db.Uuid
  carSubModelId String?           @db.Uuid
  isShow        Boolean           @default(false)
  // type          BlogType          @default(WorkBlog)
  tags          CustomerWorkTag[] // Many-to-many ‡∏Å‡∏±‡∏ö Tag
  createdAt     DateTime          @default(now()) @db.Timestamptz
  updatedAt     DateTime          @updatedAt @db.Timestamptz

  // Relations
  carSubModel CarSubModel? @relation(fields: [carSubModelId], references: [id], onDelete: SetNull)
  carModel    CarModel?    @relation(fields: [carModelId], references: [id], onDelete: SetNull)
  service     Service?     @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  subService  SubService?  @relation(fields: [subServiceId], references: [id], onDelete: SetNull)

  // @@index([type])
  @@index([isShow])
  @@index([createdAt])
}

model WorkService {
  id            String   @id @default(uuid()) @db.Uuid
  image         String
  carModelId    String   @db.Uuid
  carSubModelId String   @db.Uuid
  createdAt     DateTime @default(now()) @db.Timestamptz
  updatedAt     DateTime @updatedAt @db.Timestamptz

  carModel    CarModel    @relation(fields: [carModelId], references: [id])
  carSubModel CarSubModel @relation(fields: [carSubModelId], references: [id])
}

model CustomerWorkTag {
  customerWorkId String   @db.Uuid
  tagId          String   @db.Uuid
  createdAt      DateTime @default(now()) @db.Timestamptz
  updatedAt      DateTime @default(now()) @db.Timestamptz

  customerWork CustomerWork @relation(fields: [customerWorkId], references: [id], onDelete: Cascade)
  tag          Tag          @relation(fields: [tagId], references: [id])

  @@id([customerWorkId, tagId]) // composite key
}

model CategoryService {
  id        String     @id @default(uuid()) @db.Uuid
  title     String     @unique
  createdAt DateTime   @default(now()) @db.Timestamptz
  updatedAt DateTime   @default(now()) @db.Timestamptz
  Category  Category[]
}

model Service {
  id            String         @id @default(uuid()) @db.Uuid
  title         String?
  explain       String?
  icon          String? //Base64
  serviceName   String?
  serviceDetail String?
  images        String[]
  createdAt     DateTime       @default(now()) @db.Timestamptz
  updatedAt     DateTime       @default(now()) @db.Timestamptz
  subService    SubService[]
  // carServices   CarService[] // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á CarService
  // categoryId    String          @db.Uuid
  // category      CategoryService @relation(fields: [categoryId], references: [id])
  CustomerWork  CustomerWork[]
}

model SubService {
  id               String         @id @default(uuid()) @db.Uuid
  serviceId        String         @db.Uuid
  subServiceName   String?
  subServiceDetail String?
  Service          Service        @relation(fields: [serviceId], references: [id])
  CustomerWork     CustomerWork[]
}

model CarService {
  id            String      @id @default(uuid()) @db.Uuid
  carSubModelId String      @db.Uuid
  serviceId     String      @db.Uuid
  createdAt     DateTime    @default(now()) @db.Timestamptz
  updatedAt     DateTime    @default(now()) @db.Timestamptz
  carSubModel   CarSubModel @relation(fields: [carSubModelId], references: [id])
  // service       Service     @relation(fields: [serviceId], references: [id])
}

model Blog {
  id            String    @id @default(uuid()) @db.Uuid
  title         String
  content       Json
  facebookLink  String?   @db.VarChar(255)
  lineLink      String?   @db.VarChar(255)
  instagramLink String?   @db.VarChar(255)
  createdAt     DateTime  @default(now()) @db.Timestamptz
  updatedAt     DateTime  @default(now()) @db.Timestamptz
  blogTags      BlogTag[] // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á BlogTag
}

model Tag {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @unique
  createdAt       DateTime          @default(now()) @db.Timestamptz
  updatedAt       DateTime          @default(now()) @db.Timestamptz
  blogTags        BlogTag[] // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á BlogTag
  CustomerWorkTag CustomerWorkTag[]
}

model BlogTag {
  blogId    String   @db.Uuid
  tagId     String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz
  blog      Blog     @relation(fields: [blogId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId]) // ‡πÉ‡∏ä‡πâ composite key (blogId, tagId)
}

model Category {
  id                String           @id @default(uuid()) @db.Uuid
  name              String           @unique
  image             String
  products          Product[]
  categoryServiceId String?          @db.Uuid
  categoryService   CategoryService? @relation(fields: [categoryServiceId], references: [id])
  createdAt         DateTime         @default(now()) @db.Timestamptz
  updatedAt         DateTime         @updatedAt @db.Timestamptz
}

model Product {
  id           String    @id @default(uuid()) @db.Uuid
  name         String
  detail       String
  imageProduct String
  categoryId   String?   @db.Uuid
  category     Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
}

enum Role {
  USER
  ADMIN
  OWNER
}

// enum BlogType {
//   WorkBlog
//   ReviewBlog
// }

model User {
  id        String   @id @default(uuid()) @db.Uuid
  username  String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
}
